const roleHarvester = require('role.harvester');
const roleUpgrader = require('role.upgrader');
const roleBuilder = require('role.builder');
const defenseTower = require('defense.tower');

// Constantes pour les r√¥les et les limites
const ROLE_HARVESTER = 'harvester';
const ROLE_UPGRADER = 'upgrader';
const ROLE_BUILDER = 'builder';
const MIN_HARVESTERS = 2; // Nombre minimum de harvesters n√©cessaires
const MIN_UPGRADERS = 2; // Nombre minimum d'upgraders n√©cessaires
const MIN_BUILDERS = 2; // Nombre minimum d'upgraders n√©cessaires

/**
 * Fonction pour cr√©er un creep d'un r√¥le sp√©cifique.
 * @param {string} role - Le r√¥le du creep √† cr√©er (harvester, upgrader, etc.).
 */
function spawnCreep(role) {
    // G√©n√©ration d'un nom unique pour le creep
    const newName = role.charAt(0).toUpperCase() + role.slice(1) + Game.time;
    console.log(`Spawning new ${role}: ${newName}`);
    
    // Cr√©ation du creep avec le r√¥le sp√©cifi√©
    Game.spawns['Spawn1'].spawnCreep([WORK, CARRY, MOVE], newName, { memory: { role: role } });
}

/**
 * Fonction pour g√©rer la cr√©ation de creeps en fonction de leurs r√¥les.
 */
function manageCreeps() {
    // R√©cup√©ration des creeps de chaque r√¥le
    const harvesters = _.filter(Game.creeps, (creep) => creep.memory.role === ROLE_HARVESTER);
    const upgraders = _.filter(Game.creeps, (creep) => creep.memory.role === ROLE_UPGRADER);
    const builders = _.filter(Game.creeps, (creep) => creep.memory.role === ROLE_BUILDER);

    // Affichage du nombre de creeps de chaque r√¥le
    console.log(`Harvesters: ${harvesters.length}, Upgraders: ${upgraders.length}, Builders: ${builders.length}`);

    // Cr√©ation d'un nouveau harvester si le nombre est inf√©rieur au minimum requis
    if (harvesters.length < MIN_HARVESTERS) {
        spawnCreep(ROLE_HARVESTER);
    }

    // Cr√©ation d'un upgrader seulement si au moins 2 harvesters existent
    if (harvesters.length >= MIN_HARVESTERS && upgraders.length < MIN_UPGRADERS) {
        spawnCreep(ROLE_UPGRADER);
    }
    
    // Cr√©ation d'un builder seulement si au moins 2 harvesters et 2 upgraders existent
    if (harvesters.length >= MIN_HARVESTERS && upgraders.length >= MIN_UPGRADERS && builders.length < MIN_BUILDERS) {
        spawnCreep(ROLE_BUILDER);
    }
}

/**
 * Fonction pour ex√©cuter les actions de chaque creep en fonction de leur r√¥le.
 */
function runCreeps() {
    // Parcours de tous les creeps
    for (const creep of Object.values(Game.creeps)) {
        // Ex√©cution de l'action appropri√©e en fonction du r√¥le du creep
        switch (creep.memory.role) {
            case ROLE_HARVESTER:
                roleHarvester.run(creep);
                break;
            case ROLE_UPGRADER:
                roleUpgrader.run(creep);
                break;
            case ROLE_BUILDER:
                roleBuilder.run(creep);
                break;
        }
    }
}

module.exports.loop = function () {
    // Gestion de la cr√©ation des creeps
    manageCreeps();

    // Affichage de l'√©tat du spawn si un creep est en train d'√™tre cr√©√©
    const spawning = Game.spawns['Spawn1'].spawning;
    if (spawning) {
        const spawningCreep = Game.creeps[spawning.name];
        Game.spawns['Spawn1'].room.visual.text(
            'üõ†Ô∏è' + spawningCreep.memory.role, // Affiche le r√¥le du creep en cours de spawn
            Game.spawns['Spawn1'].pos.x + 1,
            Game.spawns['Spawn1'].pos.y,
            { align: 'left', opacity: 0.8 }
        );
    }

    // Ex√©cution de la logique de la tour de d√©fense
    defenseTower.run();

    // Ex√©cution des r√¥les des creeps
    runCreeps();

    // Nettoyage de la m√©moire pour les creeps qui n'existent plus
    for (const name in Memory.creeps) {
        if (!Game.creeps[name]) {
            delete Memory.creeps[name]; // Suppression de la m√©moire du creep
            console.log('Clearing non-existing creep memory:', name);
        }
    }
};